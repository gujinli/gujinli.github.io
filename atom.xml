<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gujinli.github.io</id>
    <title>瑾离不是锦鲤的小窝</title>
    <updated>2021-12-21T12:01:31.311Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gujinli.github.io"/>
    <link rel="self" href="https://gujinli.github.io/atom.xml"/>
    <subtitle>ACM打铁/异地恋中——</subtitle>
    <logo>https://gujinli.github.io/images/avatar.png</logo>
    <icon>https://gujinli.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 瑾离不是锦鲤的小窝</rights>
    <entry>
        <title type="html"><![CDATA[CF #762 (Div.3) 赛后题解]]></title>
        <id>https://gujinli.github.io/post/cf-762-div3-sai-hou-ti-jie/</id>
        <link href="https://gujinli.github.io/post/cf-762-div3-sai-hou-ti-jie/">
        </link>
        <updated>2021-12-21T12:00:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="a-square-string">A Square String?</h1>
<p><strong>题意：</strong> 判断一个串是否可以由两个串拼接而成。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
int t;
string s;
/**/
int main()
{
    read(t);
    while(t--)
    {
        cin &gt;&gt; s;
        int n = s.length();
        if(n &amp; 1) {puts(&quot;NO&quot;); continue;}
        if(s.substr(0, n/2) == s.substr(n/2, n/2)) puts(&quot;YES&quot;);
        else puts(&quot;NO&quot;);
    }
    return 0;
}
</code></pre>
<h1 id="b-squares-and-cubes">B Squares and Cubes</h1>
<p><strong>题意：</strong> 判断n以内有多少正整数是平方/立方数。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define int long long
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
int t, n, ans;
/**/
signed main()
{
    read(t);
    while(t--)
    {
        read(n); ans = 0;
        for(int i = 1; i * i &lt;= n; i++)
        {
            ans++;
            int num = i * i * i;
            if(num &gt; n) continue;
            int x = sqrt(num);
            if(x * x == num) continue;
            ans++;
        }
        cout &lt;&lt; ans &lt;&lt; '\n';
    }
    return 0;
}
</code></pre>
<h1 id="c-wrong-addition">C Wrong Addition</h1>
<p><strong>题意：</strong> 定义傻子加法为：按位相加后把结果直接写在答案里。即：17236 + 03465 = 1106911</p>
<p><strong>Solution：</strong> 注意细节简单模拟即可。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define PII pair&lt;int, int&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 50;
int t;
char a[N], s[N];
/**/
int main()
{
    read(t);
    while(t--)
    {
        scanf(&quot;%s%s&quot;,a+1,s+1);
        int l1 = strlen(a + 1), l2 = strlen(s + 1);
        vector&lt;int&gt;ans;
        int i, j;
        for(i = l2, j = l1; i; i--)
        {
            int num1, num2;
            if(j) num1 = a[j--] - '0';
            else num1 = 0;
            num2 = s[i] - '0';
            if(num1 &gt; num2 &amp;&amp; i == 1) break;
            if(num1 &gt; num2) num2 = num2 + 10 * (s[--i] - '0');
            if(num2 - num1 &gt; 9 || num2 - num1 &lt; 0) break;
            ans.push_back(num2 - num1);
        }
        if(j != 0 || i != 0) {puts(&quot;-1&quot;);continue;}
        int sz = ans.size();
        bool flag = 0;
        for(int k = sz-1; k &gt;= 0; k--)
        {
            if(!flag &amp;&amp; !ans[k]) continue;
            flag = 1;
            cout &lt;&lt; ans[k];
        }
        puts(&quot;&quot;);
    }
    return 0;
}
</code></pre>
<h1 id="d-new-years-problem">D New Year's Problem</h1>
<p><strong>题意：</strong></p>
<p>n个人。m个商店。</p>
<p>每个商店有对应n个人的n个礼物，每个礼物有一个满意度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，选择 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个商店使得：所有人能/获得的最大满意度的最小值最大。</p>
<p><strong>Solution：</strong></p>
<p>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>e</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">lie[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 表示第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个人的最大满意度。</p>
<p>显然，n个人选择n个商店的话，只需要把n个人最大满意度所在的商店选择即可。</p>
<p>根据鸽巢原理，n个人选择n-1的话，必然有两列的最优值在同一行。</p>
<p>我们枚举商店，选择一个商店记录其最大和次大，除去这两个人后，剩下的全部选择最大值即可。</p>
<p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
const int N = 1e5 + 5;
int t, n, m, ans, lie[N], pos1, pos2;
int main()
{
    read(t);
    while(t--)
    {
        read(m); read(n); ans = 0;
        vector&lt;int&gt;v[m+2];
        for(int i = 1; i &lt;= m; i++)
        {
            v[i].push_back(0);
            for(int j = 1, x; j &lt;= n; j++)
            {
                lie[j] = 0;
                read(x);
                v[i].push_back(x);
            }
        }
        for(int i = 1; i &lt;= n; i++)
        {
            for(int j = 1; j &lt;= m; j++)
            {
                lie[i] = max(lie[i], v[j][i]);
            }
        }
        for(int i = 1; i &lt;= m; i++)
        {
            pos1 = pos2 = 0;
            for(int j = 1; j &lt;= n; j++)
            {
                if(v[i][j] &gt; v[i][pos1]) pos2 = pos1, pos1 = j;
                else if(v[i][j] &gt; v[i][pos2]) pos2 = j;
            }
            int maxnum = min(v[i][pos1], v[i][pos2]);
            for(int j = 1; j &lt;= n; j++)
            {
                if(j == pos1 || j == pos2) continue;
                maxnum = min(maxnum, lie[j]);
            }
            ans = max(ans, maxnum);
        }
        cout &lt;&lt; ans &lt;&lt; '\n';
    }
    return 0;
}
</code></pre>
<h1 id="e-mex-and-increments">E MEX and Increments</h1>
<p><strong>题意：</strong> 给定一个长度为n的数列满足每个数都&lt;=n。每次操作可以将某个数+1。求使序列mex = {0...n} 的最小操作次数。</p>
<p><strong>Solution：</strong> 当我们求 i 时， 如果 0...i-1 所有数都有，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">ans[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> = 当前数列中 i 的数量。（开个桶记录即可）</p>
<p>如果求到第 i 个，没有 i 则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ans[i] = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，同时从前面的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">tot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span> 中找一个离得最近且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">&gt;2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的数，将其变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define int long long
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
const int N = 2e5 + 5;
int t, n, tot[N], a[N], lst, rec, pre[N];
signed main()
{
	read(t);
	while(t--)
	{
		read(n);
		memset(tot, 0, sizeof(tot));
		for(int i = 1; i &lt;= n; i++)
		{
			read(a[i]);
			tot[a[i]]++;
			pre[i] = i - 1;
		}
		pre[0] = -1;
		sort(a + 1, a + 1 + n);
		lst = -1, rec = 0;
		for(int i = 0; i &lt;= n; i++)
		{
			if(tot[i])
			{
				cout &lt;&lt; rec + tot[i] &lt;&lt; ' ';
				if(tot[i] &gt; 1) pre[i] = lst, lst = i;
			}
			else
			{
				cout &lt;&lt; rec &lt;&lt; ' ';
				if(lst == -1 || tot[lst] &lt; 2)
				{
					for(int j = i+1; j &lt;= n; j++) cout &lt;&lt; -1 &lt;&lt;' ';
					break;
				}
				rec += i - lst;
				tot[lst]--;
				while(lst != -1 &amp;&amp; tot[lst] &lt; 2) lst = pre[lst];
				pre[i] = lst;
				tot[i]++;
			}
		}
		puts(&quot;&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[漫漫ACM之路]]></title>
        <id>https://gujinli.github.io/post/man-man-acm-zhi-lu/</id>
        <link href="https://gujinli.github.io/post/man-man-acm-zhi-lu/">
        </link>
        <updated>2021-12-06T07:52:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图论">图论：</h1>
<p>**生成树问题： **</p>
<ul>
<li>最小生成树
<ul>
<li>次小生成树(非严格/严格)</li>
<li>瓶颈生成树</li>
<li>kruscal重构树</li>
</ul>
</li>
<li>最小树形图</li>
<li>最小直径生成树</li>
</ul>
<p><strong>树上问题:</strong></p>
<ul>
<li><strong>基础性质</strong> (直径,重心)</li>
<li>最近公共祖先(LCA)</li>
<li>树上启发式合并(dsu on tree)</li>
<li>虚树</li>
<li>树链剖分
<ul>
<li>重链剖分</li>
<li>长链剖分</li>
</ul>
</li>
<li>树分治:
<ul>
<li>点分治</li>
<li>边分治</li>
<li>点分树</li>
<li>动态树分治</li>
</ul>
</li>
<li>树同构:
<ul>
<li>AHU</li>
<li>树哈希</li>
</ul>
</li>
</ul>
<p><strong>最短路问题：</strong></p>
<ul>
<li>Johnson 全源最短路径算法</li>
<li>分层图最短路</li>
<li>k短路</li>
<li>同余最短路</li>
<li>差分约束</li>
</ul>
<p><strong>连通问题:</strong></p>
<ul>
<li>
<p>强连通分量</p>
</li>
<li>
<p>双连通分量</p>
</li>
<li>
<p>割点和桥</p>
</li>
<li>
<p>圆方树</p>
</li>
<li>
<p><strong>2-SAT</strong></p>
</li>
</ul>
<p><strong>特殊图问题:</strong></p>
<ul>
<li>欧拉图</li>
<li>哈密顿图</li>
<li><strong>二分图</strong>
<ul>
<li>图的着色</li>
</ul>
</li>
<li>平面图</li>
</ul>
<p><strong>特殊应用:</strong></p>
<ul>
<li>斯坦纳树</li>
<li>矩阵树定理</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[杂记]]></title>
        <id>https://gujinli.github.io/post/za-ji/</id>
        <link href="https://gujinli.github.io/post/za-ji/">
        </link>
        <updated>2021-12-01T10:59:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bitset">bitset</h1>
<p>bitset是像bool数组一样的东西。但每个位置只占1bit。<br>
一定程度上节省了空间和时间，一般来说会让算法复杂度/32。</p>
<p><strong>定义与初始化：</strong></p>
<ul>
<li>头文件：<code>#include&lt;bitset&gt;</code></li>
<li>定义时需指明所占用的空间（类数组）：<code>bitset&lt;114514&gt;bit;</code></li>
<li>初始化可以用<strong>string</strong>或<strong>int</strong>（整数类型）：</li>
</ul>
<pre><code class="language-c++">bitset&lt;23&gt;bit (string(&quot;11101001&quot;));
bitset&lt;23&gt;bit = 233;
</code></pre>
<p><strong>常用函数：</strong></p>
<blockquote>
<pre><code>bit.size()      返回大小（位数）
bit.count()     返回1的个数
bit.any()       返回是否有1
bit.none()      返回是否没有1
bit.set()       全都变成1
bit.set(p)      将第p + 1位变成1（bitset是从第0位开始的！） 
bit.set(p, x)   将第p + 1位变成x
bit.reset()     全都变成0
bit.reset(p)    将第p + 1位变成0
bit.flip()      全都取反
bit.flip(p)     将第p + 1位取反
bit.to_ulong()  返回它转换为unsigned long的结果，如果超出范围则报错
bit.to_ullong() 返回它转换为unsigned long long的结果，如果超出范围则报错
bit.to_string() 返回它转换为string的结果
</code></pre>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ICPC2021沈阳 部分题解]]></title>
        <id>https://gujinli.github.io/post/icpc2021-shen-yang-bu-fen-ti-jie/</id>
        <link href="https://gujinli.github.io/post/icpc2021-shen-yang-bu-fen-ti-jie/">
        </link>
        <updated>2021-12-01T06:01:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="e-edward-gaming-the-champion签到题">E. Edward Gaming, the Champion(签到题)</h1>
<p><strong>题意：</strong> 求一个字符串s中有多少个&quot;edgnb&quot;</p>
<p><strong>Solution：</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>D</mi><mi>G</mi><mi>N</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">EDGNB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
/**/
const int N = 2e5 + 5;
char s[N];
/**/
int main()
{
	scanf(&quot;%s&quot;, s);
	int len = strlen(s), ans = 0;
	for(int i = 0; i &lt; len; i++)
	{
		if(i+4&gt;=len) break;
		if(s[i]=='e'&amp;&amp;s[i+1]=='d'&amp;&amp;s[i+2]=='g'&amp;&amp;s[i+3]=='n'&amp;&amp;s[i+4]=='b') ans++, i = i + 4;
	}
	cout&lt;&lt;ans;
	return 0;
}

</code></pre>
<h1 id="f-encoded-strings-i签到题模拟">F. Encoded Strings I（签到题/模拟）</h1>
<p><strong>题意：</strong> 队友A的，待补。</p>
<p><strong>Solution：</strong> 队友A的，待补。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define il inline
#define ll long long
#define Max 1005
#define int ll
using namespace std;
il ll read()
{
	char c=getchar();
	ll x=0,f=1;
	while(c&gt;'9'||c&lt;'0')
	{
		if(c=='-') f=-1;
		c=getchar();
	}
	while(c&gt;='0'&amp;&amp;c&lt;='9')
	{
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
int n,a[Max],c[Max],id[Max];
char s[Max],t[Max][Max];
il bool cmp(int x,int y)
{
	int l=min(strlen(t[x]+1),strlen(t[y]+1));
	for(int i=1;i&lt;=l;i++)
	{
		if(t[x][i]&lt;t[y][i]) return 0;
		if(t[x][i]&gt;t[y][i]) return 1;
	}
	return strlen(t[x]+1)&gt;strlen(t[y]+1);
}
signed main()
{
	n=read();
	scanf(&quot;%s&quot;,s+1);
	for(int i=1;i&lt;=n;i++)
	{
		for(int j=1;j&lt;=26;j++) c[j]=0;
		int tot=0;
		for(int j=i;j&gt;=1;j--)
		{
			if(!c[s[j]-'a'+1]) t[i][j]=tot+'a',c[s[j]-'a'+1]=++tot;
			else t[i][j]=c[s[j]-'a'+1]+'a'-1;
			//cout&lt;&lt;j&lt;&lt;' '&lt;&lt;c[s[j]-'a'+1]&lt;&lt;' '&lt;&lt;s[j]&lt;&lt;' '&lt;&lt;tot&lt;&lt;&quot; qwq\n&quot;;
		}
	}
	//for(int i=1;i&lt;=n;i++) puts(t[i]+1);
	for(int i=1;i&lt;=n;i++) id[i]=i;
	sort(id+1,id+1+n,cmp);
	puts(t[id[1]]+1);
}

</code></pre>
<h1 id="j-luggage-lockbfs">J. Luggage Lock（bfs）</h1>
<p><strong>题意：</strong> 一个四位数密码。给定起始状态 <strong>A</strong> 和终止状态 <strong>B</strong> 。每次可以选择一段区间<strong>向上拧或向下拧</strong>（即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1/-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">/</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）。</p>
<p>求由A变为B的最小操作次数。</p>
<p><strong>Solution：</strong> 因为所有的两组状态都可以转化成 <strong>起始状态为 0000</strong>。因此对于 <strong>0000</strong> 开始，其实只有 <strong>10000</strong> 种状态。</p>
<p>预处理：利用 <strong>bfs</strong> 求最少步数。同时对已经得到的状态进行标记即可。</p>
<p>然后即可对每组询问 <strong>O(1)</strong> 输出。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define PII pair&lt;string,int&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const string opt[15] = {&quot;0001&quot;,&quot;0011&quot;,&quot;0111&quot;,&quot;1111&quot;,&quot;0010&quot;,&quot;0110&quot;,&quot;1110&quot;,&quot;0100&quot;,&quot;1100&quot;,&quot;1000&quot;};
int vis[10005], ans[10005];
/**/
inline int get(string s)
{
	int ret = 0;
	for(int i=0;i&lt;4;i++) ret=(ret&lt;&lt;3)+(ret&lt;&lt;1)+s[i]-'0';
	return ret;
}
inline string work(string s,int p,int flag)
{
	string ret = s;
	for(int i=0;i&lt;4;i++)
	{
		if(opt[p][i]=='0') continue;
		ret[i]=(ret[i]-'0'+flag+10)%10+'0';
	}
	return ret;
}
int main()
{
	queue&lt;PII&gt;q;
	q.push(PII(&quot;0000&quot;,0));
	vis[0] = 1;
	while(!q.empty())
	{
		PII t = q.front(); q.pop();
		string u = t.first;
		int step = t.second;
		for (int i = 0; i &lt; 10; i++)
		{

			string s1 = work(u,i,1);
			string s2 = work(u,i,-1);
			int num1 = get(s1), num2 = get(s2);
			if(!vis[num1])
			{
				vis[num1]=1;
				ans[num1]=step + 1;
				q.push(PII(s1, step + 1));
			}
			if(!vis[num2]) vis[num2] = 1, ans[num2] = step + 1, q.push(PII(s2, step + 1));
		}
	}
	int t;
	read(t);
	string S1, S2, T;
	while(t--)
	{
		cin &gt;&gt; S1 &gt;&gt; S2;
		int ret = 0;
		for(int i=0;i&lt;4;i++)
		{
			ret = ret * 10 + (S2[i]-S1[i]+10)%10;
		}
		cout &lt;&lt; ans[ret] &lt;&lt; '\n';
	}
	return 0;
}
</code></pre>
<h1 id="b-bitwise-exclusive-or-sequence铜牌题">B. Bitwise Exclusive-OR Sequence（铜牌题）</h1>
<p><strong>题意：</strong> 一段长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的数。给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 组关系。每组关系 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(u,v,w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span> 描述了：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>u</mi></msub><mo>⊕</mo><msub><mi>a</mi><mi>v</mi></msub><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">a_u \oplus a_v=w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></p>
<p>求这组数 各元素和 的最小值。</p>
<p><strong>Solution：</strong> 可以根据每组关系建边，随意以一个有出边的点为树根进行遍历。</p>
<p>定义 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo>[</mo><mi>u</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dis[u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span> 为 从根节点到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 的边权异或和。根据异或性质易知：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>r</mi><mi>t</mi></mrow></msub><mo>⊕</mo><msub><mi>a</mi><mi>u</mi></msub><mo>=</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">a_{rt} \oplus a_u = dis_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>如果出现两个不同值的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo>[</mo><mi>u</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dis[u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span> 则数据出现矛盾输出 <strong>-1</strong>。</p>
<p>对该森林的其中一个树，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">tot[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 表示所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo>[</mo><mi>u</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dis[u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span> 的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 位为1的数量。超过一半则让根该位为<strong>1</strong>更优，否则让根该位为<strong>0</strong>。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define ll long long
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 1e5 + 5, M = 4e5 + 5;
int n, m, head[N], cnt, dis[N], tot[N], vis[N], sum;
bool err;
ll ans;
struct edge
{
	int nxt, to, w;
}e[M];
/**/
inline void add(int u, int v, int w)
{
	e[++cnt] = (edge){head[u], v, w};
	head[u] = cnt;
}
void dfs(int u, int fa, int ti)
{
	if(err) return;
	for(int i = head[u]; i; i = e[i].nxt)
	{
		int v = e[i].to;
		if(v == fa) continue;
		if(vis[v])
		{
			if((dis[u] ^ e[i].w) == dis[v]) continue;
			else {err = 1; return;}
		}
		vis[v] = ti;
		dis[v] = (dis[u] ^ e[i].w);
		sum++;
		for(int j = 0; j &lt;= 30; j++)
		{
			if(dis[v] &amp; (1&lt;&lt;j)) tot[j]++;
		}
		dfs(v, u, ti);
		if(err) return;
	}
}
int main()
{
	read(n); read(m);
	for(int i = 1, u, v, w; i &lt;= m; i++)
	{
		read(u); read(v); read(w);
		if(u==v)
		{
			if(w) err = 1;
			continue;
		}
		add(u, v, w);
		add(v, u, w);
	}
	if(err) {puts(&quot;-1&quot;);return 0;}
	for(int i = 1; i &lt;= n; i++)
	{
		if(!head[i]) continue;
		if(vis[i]) continue;
		vis[i] = i;
		dfs(i, 0, i); sum++;
		for(int j = 0; j &lt;= 30; j++)
		{
			ans += 1ll * min(tot[j], sum - tot[j]) * (1 &lt;&lt; j);
			tot[j] = 0;
		}
		sum = 0;
		if(err) {puts(&quot;-1&quot;); return 0;}	
	}
	if(err) {puts(&quot;-1&quot;); return 0;}
	cout &lt;&lt; ans &lt;&lt; '\n';
	return 0;
}
</code></pre>
<h1 id="l-perfect-matchings树形dp容斥">L. Perfect Matchings（树形dp+容斥）</h1>
<p><strong>题意：</strong> 队友A的，待补。</p>
<p><strong>Solution：</strong> 队友A的，待补。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define il inline
#define ll long long
#define Max 4010
#define Mod 998244353
#define int ll
using namespace std;
il ll read()
{
	char c=getchar();
	ll x=0,f=1;
	while(c&gt;'9'||c&lt;'0')
	{
		if(c=='-') f=-1;
		c=getchar();
	}
	while(c&gt;='0'&amp;&amp;c&lt;='9')
	{
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
struct node
{
	int t,nt;
}e[Max&lt;&lt;1];
int n,head[Max],tot,f[Max][Max][2],g[Max],sz[Max],ans;
il void add(int u,int v)
{
	e[++tot].t=v;
	e[tot].nt=head[u];
	head[u]=tot;
}
il void dfs(int u,int fa)
{
	sz[u]=1;
	for(int i=head[u];i;i=e[i].nt)
	{
		int v=e[i].t;
		if(v==fa) continue;
		dfs(v,u);
		sz[u]+=sz[v];
	}
	int s=1;
	//f[u][0][0]=1;
	f[u][0][0]=1;
	for(int i=head[u];i;i=e[i].nt)
	{
		int v=e[i].t;
		if(v==fa) continue;
		for(int j=s/2+1;j&gt;=0;j--)
		{
			for(int k=1;k&lt;=sz[v]/2+1;k++)
			{
				//if(j==0&amp;&amp;k==0) continue;
				f[u][j+k][0]=(f[u][j+k][0]+f[u][j][0]*f[v][k][0]+f[u][j][0]*f[v][k][1])%Mod;
				//f[u][0][0]=1;
				f[u][j+k][1]=(f[u][j+k][1]+f[u][j][0]*f[v][k-1][0]+f[u][j][1]*(f[v][k][0]+f[v][k][1]))%Mod;
				//cout&lt;&lt;u&lt;&lt;' '&lt;&lt;v&lt;&lt;' '&lt;&lt;j&lt;&lt;' '&lt;&lt;k&lt;&lt;' '&lt;&lt;f[1][1][1]&lt;&lt;&quot; qwq\n&quot;;
			}
		}
		s+=sz[v];
	}
}
signed main()
{
	n=read()*2;
	for(int i=1;i&lt;n;i++)
	{
		int u=read(),v=read();
		add(u,v),add(v,u);
	}
	g[0]=1;
	for(int i=2;i&lt;=n;i+=2) g[i]=(i-1)*g[i-2]%Mod;
	dfs(1,0);
	//for(int i=0;i&lt;=n/2;i++) cout&lt;&lt;f[1][i][1]&lt;&lt;' '&lt;&lt;f[1][i][0]&lt;&lt;endl;
	for(int i=0;i&lt;=n/2;i++)
	{
		ans=ans+(g[n-i*2]*(f[1][i][1]+f[1][i][0])%Mod*(i&amp;1?-1:1)+Mod);
		ans=(ans+Mod)%Mod;
	}
	cout&lt;&lt;ans&lt;&lt;endl;
}

</code></pre>
<h1 id="m-string-problemkmp">M. String Problem（KMP）</h1>
<p><strong>题意：</strong> 给定一个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的字符串s。输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>l</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(l_i, r_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 表示：</p>
<p>对 s 的前缀 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mn>1...</mn><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{1...i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中字典序最大的子串。</p>
<p><strong>Solution：</strong> 首先容易得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">r_i = i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>。然后做了一个神奇的 <strong>KMP</strong> 。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
const int N = 1e6 + 5;
char s[N];
int nxt[N];
int main()
{
	scanf(&quot;%s&quot;, s + 1);
	int len = strlen(s + 1);
	puts(&quot;1 1&quot;);
	int pos = 1, j = 1;
	for(int i = 2; i &lt;= len; i++)
	{
		while(j &amp;&amp; s[i] &gt; s[pos + nxt[j]])
		{
			pos += (j - nxt[j]);
			j = nxt[j];
		}
		if(j &amp;&amp; s[i] == s[pos + nxt[j]])
		{
			j++;
			nxt[j] = nxt[j - 1] + 1;
		}
		else nxt[++j] = 0;
		printf(&quot;%d %d\n&quot;, pos, i);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ICPC2021上海 部分题解]]></title>
        <id>https://gujinli.github.io/post/icpc2021-shang-hai-bu-fen-ti-jie/</id>
        <link href="https://gujinli.github.io/post/icpc2021-shang-hai-bu-fen-ti-jie/">
        </link>
        <updated>2021-12-01T06:00:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>场外一共做了六道题，罚时大概是银末的位置、场上的话估计只能铜。<br>
题目质量还是挺高的很有意思。</p>
</blockquote>
<h1 id="e-strange-integers签到题">E Strange Integers（签到题）</h1>
<p><strong>题意：</strong> 一段长度为n的序列。从中选出尽可能多的数，使任意两个数之间的绝对值相差大于k。</p>
<p><strong>Solution：</strong> 对序列排序后从小到大。最小的数一定选，之后的从小到大能选就选。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 1e5 + 5;
int n, k, a[N], ans, rec;
/**/
int main()
{
	read(n); read(k);
	for(int i = 1; i &lt;= n; i++) read(a[i]);
	sort(a + 1, a + 1 + n);
	rec = -1000000000;
	for(int i = 1; i &lt;= n; i++)
	{
		// cout &lt;&lt; 
		if(a[i] - rec &gt;= k) rec = a[i], ans++;
	}
	cout &lt;&lt; ans &lt;&lt; '\n';
	return 0;
}
</code></pre>
<h1 id="d-strange-fractions签到题">D Strange Fractions（签到题）</h1>
<p><strong>题意：</strong> 给定p和q。求一组合法的a和b满足：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac><mo>=</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>+</mo><mfrac><mi>b</mi><mi>a</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{p}{q} = \frac{a}{b} + \frac{b}{a}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><strong>Solution：</strong></p>
<p>先推式子：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac><mo>=</mo><mfrac><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><mrow><mi>a</mi><mi>b</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mfrac><mrow><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi></mrow><mi>q</mi></mfrac><mo>=</mo><mfrac><mrow><mo>(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo>)</mo><mn>2</mn></msup></mrow><mrow><mi>a</mi><mi>b</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mfrac><mrow><mo>(</mo><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi><msup><mo>)</mo><mn>2</mn></msup></mrow><mrow><mi>q</mi><mo>(</mo><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mo>(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo>)</mo><mn>2</mn></msup></mrow><mrow><mi>a</mi><mi>b</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\frac{p}{q} = \frac{a^2+b^2}{ab}\\
\frac{p+2q}{q} = \frac{(a+b)^2}{ab}\\
\frac{(p+2q)^2}{q(p+2q)} = \frac{(a+b)^2}{ab}\\
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.427108em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p>
<p>得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi><mspace width="1em"/><mrow></mrow><mi>a</mi><mi>b</mi><mo>=</mo><mi>q</mi><mo>(</mo><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">a + b = p + 2q\quad{}ab = q(p + 2q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:1em;"></span><span class="mord"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></p>
<p>联立即可得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 。同除以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">gcd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span></span></span></span> 约分一下即可。</p>
<p>注： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>+</mo><mn>2</mn><mi>q</mi></mrow><annotation encoding="application/x-tex">p + 2q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span> 是完全平方数则有解， 否则无解。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
int t, p, q, num1, num2, num3, num4, a, b, g;
/**/
signed main()
{
	read(t);
	while(t--)
	{
		read(p); read(q);
		num1 = p + 2 * q;// a + b
		num2 = num1 * q;// ab
		num3 = num1 * num1 - 4 * num2;// (a - b) ^ 2
		num4 = sqrt(num3);// a - b
		if(num4 * num4 != num3) puts(&quot;0 0&quot;);
		else
		{
			a = (num1 + num4) / 2;
			b = num1 - a;
			g = __gcd(a, b);
			a /= g; b /= g;
			cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';
		}
	}
	return 0;
}
</code></pre>
<h1 id="g-edge-groups树形dp">G Edge Groups（树形dp）</h1>
<p><strong>题意：</strong> n（奇数）个点的树，n-1条边分成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>组，每组两条边并且两条边要有一个公共点。求分组的方案数。</p>
<p><strong>Solution：</strong> 首先。n个元素两两分组的方案数是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>n</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> ，则有递推式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>n</mi><mo>]</mo><mo>=</mo><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>]</mo><mo>∗</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">f[n] = f[n- 2] * (n - 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>u</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dp[u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>子树的方案数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>子树中点数为奇数的个数。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>u</mi><mo>]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo>[</mo><mi>b</mi><mo>]</mo><mo>∗</mo><mo>∏</mo><mi>f</mi><mo>[</mo><mi>v</mi><mo>]</mo><mspace width="1em"/><mspace width="1em"/><mtext>  </mtext><mtext>  </mtext><mtext>b is even</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo>[</mo><mi>b</mi><mo>+</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mo>∏</mo><mi>f</mi><mo>[</mo><mi>v</mi><mo>]</mo><mspace width="1em"/><mtext>b is odd</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[u] = \begin{cases}
f[b]*\prod f[v] \quad\quad\;\; \text{b is even} \\
f[b+1]*\prod f[v] \quad \text{b is odd}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord">b is even</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">b is odd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define ll long long
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 1e5 + 5, mod = 998244353;
int n, sz[N];
ll f[N], dp[N];
vector&lt;int&gt;g[N];
/**/
void dfs(int u, int fa)
{
	sz[u] = 1; dp[u] = 1;
	int cnt = 0;
	for(auto &amp;v : g[u])
	{
		if(v == fa) continue;
		dfs(v, u);
		sz[u] += sz[v];
		dp[u] = dp[u] * dp[v] % mod;
		if(sz[v] &amp; 1) cnt++;
	}
	if(cnt &amp; 1) cnt++;
	dp[u] = dp[u] * f[cnt] % mod;
}
signed main()
{
	read(n);
	for(int i = 1, x, y; i &lt; n; i++)
	{
		read(x); read(y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	f[0] = 1;
	for(int i = 2; i &lt;= n; i += 2)
	{
		f[i] = f[i - 2] * (i - 1) % mod;
	}
	dfs(1, 0);
	cout &lt;&lt; dp[1];
	return 0;
}
</code></pre>
<h1 id="i-steadily-growing-steam签到题背包">I Steadily Growing Steam（签到题/背包）</h1>
<p><strong>题意：</strong> n 个物品。每个物品有价值w[i] 和 体积 v[i]，求从中选出两个无交集的集合，两个集合的体积和相等，价值和最大。</p>
<p>注：可以将这n个物品中至多k个物品的体积翻倍。</p>
<p><strong>Solution：</strong> 对选入两个集合分别用正负进行表示即可，注意边界问题的处理正常背包即可。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
#define ll long long
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
int n, k, w[105], v[105], m;
ll f[105][3000][105], ans;
/**/
int main()
{
	read(n); read(k);
	ans = 0;
	for(int i = 1; i &lt;= n; i++) {read(w[i]); read(v[i]);}
	memset(f, -0x3f, sizeof(f));
	f[0][1400][0] = 0;
	for(int i = 1; i &lt;= n; i++)
	{
		for(int j = 0; j &lt;= 2800; j++)
		{
			f[i][j][0] = max(max(f[i][j][0], f[i-1][j][0]), f[i-1][j+v[i]][0]+w[i]);
			if(j&gt;=v[i]) f[i][j][0] = max(f[i][j][0], f[i-1][j-v[i]][0]+w[i]);
			for(int t = 1; t &lt;= min(i, k); t++)
			{
				f[i][j][t] = max(max(f[i][j][t], f[i-1][j][t]), max(f[i-1][j+2*v[i]][t-1], f[i-1][j+v[i]][t])+w[i]);
				if(j&gt;=v[i]) f[i][j][t] = max(f[i][j][t], f[i-1][j-v[i]][t]+w[i]);
				if(j&gt;=2*v[i]) f[i][j][t] = max(f[i][j][t], f[i-1][j-2*v[i]][t-1]+w[i]);
			}
		}
	}
	for(int i = 0; i &lt;= k; i++) ans = max(ans, f[n][1400][i]);
	cout &lt;&lt; ans &lt;&lt; '\n';
	return 0;
}
</code></pre>
<h1 id="k-circle-of-life银牌题构造">K Circle of Life（银牌题/构造）</h1>
<p><strong>题意：</strong> 一个n位的由0和1组成的串。对每秒，1（星星）变成0向两边发射1，两个扩散的星星相撞则变成0。</p>
<p><strong>Solution：</strong> 暴力打表找规律。找出某一循环的特殊性质后输出。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
inline void W(int x) {if(x&lt;0){putchar('-'),x=-x;}write(x);}
/**/
int n;
/**/
int main()
{
    cin &gt;&gt; n;
    if(n == 3) {puts(&quot;Unlucky&quot;); return 0;}
    else
    {
        if(n&amp;1) printf(&quot;100&quot;),n-=3;
        n/=2;
        for(int i=1;i&lt;=n;i++)
        {
            if(i&amp;1) printf(&quot;01&quot;);
            else printf(&quot;10&quot;);
        }
    }
    return 0;
}
</code></pre>
<h1 id="m-harmony-in-harmony银牌题构造">M Harmony in Harmony(银牌题/构造)</h1>
<p><strong>题意：</strong> 待补。</p>
<p><strong>Solution：</strong> 瞎猜的。待补。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
int n,m;
signed main()
{
	read(n);
	for(int i=1;i&lt;=n;i++)
	{
		m=max(m,(n*(i)*(n-i+1)));
	}
	printf(&quot;%.9f&quot;,1.0/m);
}
</code></pre>
<h1 id="h-life-is-a-game铜牌题kruscal重构树可并堆">H Life is a Game(铜牌题/kruscal重构树|可并堆)</h1>
<p><strong>题意：</strong> 对于n个点m条边的无向图有q个询问。图有点权和边权，每个询问 x,k 表示从 x 出发，初始能力值为k，当能力值大于边权则能通过这条边，第一次到达一个点可以获得该点点权的能力值。求可以获得的最大能力。</p>
<p><strong>Solution：</strong> 对边按边权从小到大排序。询问离线，用n个堆维护每个点的询问（按k从小到大维护）。</p>
<p>枚举边，对边（无向）的两个端点，分别取出能力值不能通过这条边的询问，记录答案。</p>
<p>对于剩下的结点（全部能够通过这条边），利用并查集合并这两个节点，同时将堆按并查集的思路 启发式合并（小堆并大堆）。</p>
<p>枚举完边后对于剩余没有得到答案的询问（即合并完成的询问），单独取出并记录答案。</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define PII pair&lt;int, int&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 1e5 + 5;
int n, m, t, sum[N], fa[N], ans[N];
struct edge
{
	int from, to, w;
	bool operator &lt; (const edge &amp;b) const {return w &lt; b.w;}
}e[N];
priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt; &gt;q[N];
/**/
inline int find(int x){return x == fa[x] ? x : fa[x] = find(fa[x]);}
int main()
{
	read(n); read(m); read(t);
	for(int i = 1; i &lt;= n; i++) read(sum[i]), fa[i] = i;
	for(int i = 1, u, v, w; i &lt;= m; i++) read(u), read(v), read(w), e[i] = (edge){u, v, w};
	sort(e + 1, e + 1 + m);
	for(int i = 1, x, k; i &lt;= t; i++) read(x), read(k), q[x].push(PII(k, i));
	for(int i = 1; i &lt;= m; i++)
	{
		int u = find(e[i].from), v = find(e[i].to);
		if(u == v) continue;
		while(!q[u].empty() &amp;&amp; q[u].top().first + sum[u] &lt; e[i].w)
		{
			int id = q[u].top().second;
			ans[id] = q[u].top().first + sum[u];
			q[u].pop();
		}
		while(!q[v].empty() &amp;&amp; q[v].top().first + sum[v] &lt; e[i].w)
		{
			int id = q[v].top().second;
			ans[id] = q[v].top().first + sum[v];
			q[v].pop();
		}
		if(q[u].size() &gt; q[v].size()) swap(u, v);
		while(!q[u].empty()) q[v].push(q[u].top()), q[u].pop();
		fa[u] = v; sum[v] += sum[u];
	}
	for(int i = 1; i &lt;= n; i++)
	{
		int u = find(i);
		while(!q[u].empty())
		{
			PII x = q[u].top(); q[u].pop();
			ans[x.second] = x.first + sum[u];
		}
	}
	for(int i = 1; i &lt;= t; i++) cout &lt;&lt; ans[i] &lt;&lt; '\n';
	return 0;
}
</code></pre>
<h1 id="j-two-binary-strings-problem银牌题bitset">J Two Binary Strings Problem（银牌题/bitset）</h1>
<p><strong>题意：</strong> 给定长度为n的两个01串A和B。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>)</mo><mo>!</mo></mrow><annotation encoding="application/x-tex">f(l,r)!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span>表示区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>的众数。（01数量相等时为0）</p>
<p>求一个长度同样为n的01串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ans</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">ans_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为 <strong>1</strong> 时当且仅当：对所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mspace width="1em"/><mi mathvariant="normal">有</mi><mi>f</mi><mo>(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mi>i</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo>)</mo><mo separator="true">,</mo><mi>i</mi><mo>)</mo><mo>=</mo><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">1\le i\le n\quad{有}f(max(i-k+1, 1), i) = B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord cjk_fallback">有</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 成立</p>
<p><strong>Solution：</strong></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mspace width="1em"/><mtext>  </mtext><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>1</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>2</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>0</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>3</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>4</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>0</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>5</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>6</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace><mi>K</mi><mn>7</mn><mspace width="1em"/><mn>0</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mtext>  </mtext><mn>0</mn><mtext>  </mtext><mn>1</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">A\quad\;\; 0\; 1\; 1\; 0\; 1\; 0\; 1\\

K1\quad  0\; 1\; 1\; 0\; 1\; 0\; 1\\

K2\quad  0\; 0\; 1\; 0\; 0\; 0\; 0\\

K3\quad  0\; 0\; 1\; 1\; 1\; 0\; 1\\

K4\quad  0\; 0\; 1\; 0\; 1\; 0\; 0\\

K5\quad  0\; 0\; 1\; 0\; 1\; 1\; 1\\

K6\quad  0\; 0\; 1\; 0\; 1\; 0\; 1\\

K7\quad  0\; 0\; 1\; 0\; 1\; 0\; 1\\
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">2</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">3</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">4</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">5</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">6</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord">7</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span><span class="mspace newline"></span></span></span></span></p>
<p>对于每一行，若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">C_i = B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> ，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ans_i = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>由于行之间的关系不好找，转成<strong>列</strong> 。</p>
<ul>
<li>对于第i列，找到<strong>最近的</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mo>+</mo><mn>1...</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">j+1...i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span></span></span></span> 的0和1相等。因为是最近的，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">故</mi><mi>f</mi><mo>(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>)</mo><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">而</mi><mi>f</mi><mo>(</mo><mi>j</mi><mo>+</mo><mi>k</mi><mo separator="true">,</mo><mi>i</mi><mo>)</mo><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>(</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">故f(j+1,i)=0, 而f(j+k,i)=A_i (1\le k \le i-j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">故</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">而</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></li>
</ul>
<p>故对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1...</mn><mo>(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">1...(i-j-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>项均<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">=A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i-j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>项恰好<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo>)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">(i-j+1)...n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">n</span></span></span></span>可由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>转移。</p>
<ul>
<li>若找不到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>全部等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
</ul>
<p><strong>难点其实在位运算的转移上。需要思考一下。</strong></p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
/**/
const int N = 5e4 + 5;
int t, n, tot[N*2];
char A[N], B[N];
bitset&lt;N&gt;C[N], ans, all1;
/**/
int main()
{
	read(t);
	while(t--)
	{
		read(n);
		scanf(&quot;%s%s&quot;, A, B);
		for(int i = 0; i &lt; n; i++) all1[i] = 1, C[i] = 0; ans = all1;
		for(int i = 0; i &lt;= 2*n; i++) tot[i] = -2; tot[n] = -1;
		int rec = n;
		for(int i = 0; i &lt; n; i++)
		{
			A[i] == '1' ? ++rec : --rec;
			int j = tot[rec];
			// printf(&quot;i = %d, j = %d\n&quot;, i + 1, j);
			if(j == -2) A[i] == '1' ? C[i] = all1 : C[i] = 0;
			else
			{
				//1 -&gt; (i - j - 1) 位 = A[i] , 第 i - j 位 = 0 ( 0和1 恰好 相等) , 剩下的由之前的递推而来
				if(A[i] == '1') C[i] |= all1 &gt;&gt; (n - (i - j - 1) ); //原来n位，变成(i-j-1)位
				if(j != -1) C[i] |=  C[j] &lt;&lt; (i - j);
				else if(C[i][i]) C[i] |= all1 &lt;&lt; i; // K &gt; (i - j);
			}
			// for(int k = 0; k &lt; n; k++) cout &lt;&lt; C[i][k]; puts(&quot;&quot;);
			tot[rec] = i;
			ans &amp;= (B[i]=='1' ? C[i] : ~C[i]);
		}
		for(int i = 0; i &lt; n; i++) cout &lt;&lt; ans[i]; putchar('\n');
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搜索与图论]]></title>
        <id>https://gujinli.github.io/post/sou-suo-yu-tu-lun/</id>
        <link href="https://gujinli.github.io/post/sou-suo-yu-tu-lun/">
        </link>
        <updated>2021-11-29T13:11:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dfs与bfs">DFS与BFS</h1>
<ul>
<li>
<p>注意剪枝，边界表示。</p>
</li>
<li>
<p>状态需要判重时，能不用map尽量不用，能用数字尽量不用字符串</p>
</li>
</ul>
<h1 id="树与图的遍历">树与图的遍历</h1>
<ul>
<li>
<p>正常遍历</p>
</li>
<li>
<p>拓扑排序：根据入度删点，入度为0的点加入队列bfs</p>
</li>
</ul>
<h1 id="最短路">最短路</h1>
<ul>
<li>floyd &amp; spfa &amp; dijkstra</li>
</ul>
<blockquote>
<p><strong>spfa</strong>：队头出队，松弛它的边，松弛了且不在队内的点入队。</p>
</blockquote>
<blockquote>
<ul>
<li>判断负环： 判入队次数是否&gt;n</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>差分约束：按照<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo>[</mo><mi>v</mi><mo>]</mo><mo>&lt;</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mo>[</mo><mi>u</mi><mo>]</mo><mo>+</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">dis[v] &lt;= dis[u] + w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>的形式建边求最短路或反之求最长路即可</li>
<li>差分约束最优解 最大值求最短路 最小值求最长路</li>
</ul>
</blockquote>
<blockquote>
<p><strong>dij</strong>：每次取出当前距离最小的点，表示该点的最短路已经确定。</p>
</blockquote>
<ul>
<li>
<p>反向建边</p>
</li>
<li>
<p>虚点建边</p>
</li>
</ul>
<h1 id="最小生成树">最小生成树</h1>
<ul>
<li>
<p>prim</p>
</li>
<li>
<p>kruskal</p>
</li>
<li>
<p>次小生成树？</p>
</li>
</ul>
<blockquote>
<p>prim维护f[i][j] 表示最小生成树中 i到j 的最长边</p>
</blockquote>
<blockquote>
<p>kruscal + lca O(1)离线查询 i到j 的最长边</p>
</blockquote>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#define ll long long
#define space putchar(' ')
#define endl putchar('\n')
#define debug puts(&quot;------------------------&quot;)
#define lowbit(x) (x&amp;-x)
#define LOCAL
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
inline int  Rem() {int a=0,c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();return a*=b; }
inline void write(int x) {if(x&gt;9)write(x/10);putchar('0'+x%10);}
inline void W(int x) {if(x&lt;0){putchar('-'),x=-x;}write(x);}
/**/
const int inf = 0x3f3f3f3f;
const int N = 105;
int t,n,m,e[N][N],cnt,dis[N],s1,s2,pre[N],f[N][N];
bool tree[N][N], vis[N];
struct edge
{
	int from,to,w;
}ed[N*N];
/**/
int main()
{
	#if ONLINE_JUDGE
	#else
	freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
	freopen(&quot;test.out&quot;,&quot;w&quot;,stdout);
	#endif
	read(t);
	while(t--)
	{
		cnt = 0;
		read(n);read(m);
		for(int i=1;i&lt;=n;i++)
		{
			pre[i] = 0;
			for(int j=1;j&lt;=i+1;j++) e[i][j] = e[j][i] = inf, tree[i][j] = tree[j][i] = 0, f[i][j] = f[j][i] = 0;
		}
		for(int i=1,a,b,c;i&lt;=m;i++)
		{
			read(a);read(b);read(c);
			ed[++cnt] = (edge){a,b,c};
			e[a][b] = e[b][a] = c;
		}
		for(int i=0;i&lt;=n;i++) dis[i] = inf, vis[i] = 0;
		dis[1] = 0;
		s1 = 0;
		for(int i=1;i&lt;=n;i++)
		{
			int u = 0;
			for(int j=1;j&lt;=n;j++) if(!vis[j]&amp;&amp;dis[j]&lt;dis[u]) u = j;
			vis[u] = 1;
			tree[pre[u]][u] = tree[u][pre[u]] = 1;
			if(u) s1 += dis[u];
			for(int j=1;j&lt;=n;j++)
			{
				if(u==j) continue;
				if(vis[j])
				{
					f[j][u] = f[u][j] = max(f[pre[u]][j], dis[u]);
				}
				if(!vis[j] &amp;&amp; dis[j] &gt; e[u][j])
				{
					dis[j] = e[u][j];
					pre[j] = u;
				}
			}
		}
		s2 = inf;
		for(int i=1;i&lt;=cnt;i++)
		{
			int u = ed[i].from, v = ed[i].to;
			if(tree[u][v]) continue;
			// printf(&quot;%d - %d = %d\n&quot;,u,v,f[u][v]);
			s2 = min(s2, s1 - f[u][v] + ed[i].w);
		}
		cout &lt;&lt; s1 &lt;&lt;' '&lt;&lt; s2 &lt;&lt;'\n';
	}
	return 0;
}

</code></pre>
<ul>
<li>有向图有根最小生成树？ -&gt; 朱刘算法</li>
</ul>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#define ll long long
#define space putchar(' ')
#define endl putchar('\n')
#define debug puts(&quot;------------------------&quot;)
#define lowbit(x) (x&amp;-x)
#define LOCAL
using namespace std;
inline void read(int &amp;a) {a=0;int c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();a*=b; }
inline int  Rem() {int a=0,c=getchar(),b=1; while(c&gt;'9'||c&lt;'0') {if(c=='-')b=-1;c=getchar();} while(c&gt;='0'&amp;&amp;c&lt;='9') a=(a&lt;&lt;3)+(a&lt;&lt;1)+c-48,c=getchar();return a*=b; }
inline void write(int x) {if(x&gt;9)write(x/10);putchar('0'+x%10);}
inline void W(int x) {if(x&lt;0){putchar('-'),x=-x;}write(x);}
/**/
const int N = 105, M = 1e4 + 5;
int n, cnt, m, fa[N], id[N], vis[N];
double x[N], y[N], in[N];
struct edge
{
   int from, to;
   double w;
}e[M];
/**/
inline double get(int i, int j)
{
   return sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));
}
inline double zhuliu()
{
   double ans = 0;
   int root = 1;
   while(1)
   {
   	for(int i = 1; i &lt;= n; i++) in[i] = 0x3f3f3f3f;
   	for(int i = 1; i &lt;= cnt; i++)
   	{
   		int u = e[i].from, v = e[i].to;
   		if(u != v &amp;&amp; e[i].w &lt; in[v])
   		{
   			fa[v] = u;
   			in[v] = e[i].w;
   		}
   	}
   	for(int i = 1; i &lt;= n; i++) if(in[i] == 0x3f3f3f3f) return -1;
   	int tot = 0;
   	in[root] = 0;
   	for(int i = 1; i &lt;= n; i++) vis[i] = id[i] = 0;
   	for(int i = 1; i &lt;= n; i++)
   	{
   		int u = i;
   		ans += in[u];
   		while(vis[u] != i &amp;&amp; !id[u] &amp;&amp; u != root) vis[u] = i, u = fa[u];
   		if(u != root &amp;&amp; !id[u])
   		{
   			id[u] = ++tot;
   			for(int x = fa[u]; x != u; x = fa[x]) id[x] = tot;
   		}
   	}
   	if(!tot) break;
   	for(int i = 1; i &lt;= n; i++) if(!id[i]) id[i] = ++tot;
   	int cnt_ = 0;
   	for(int i = 1; i &lt;= cnt; i++)
   	{
   		int u = e[i].from, v = e[i].to;
   		if(id[u] =! id[v]) e[++cnt_] = (edge){id[u], id[v], e[i].w - in[v]};
   	}
   	cnt = cnt_;
   	n = tot;
   	root = id[root];
   }
   return ans;
}
int main()
{
   #if ONLINE_JUDGE
   #else
   freopen(&quot;test.in&quot;,&quot;r&quot;,stdin);
   freopen(&quot;test.out&quot;,&quot;w&quot;,stdout);
   #endif
   while(cin &gt;&gt; n &gt;&gt; m)
   {
   	cnt = 0;
   	for(int i = 1; i &lt;= n; i++)
   	{
   		cin &gt;&gt; x[i] &gt;&gt; y[i];
   	}
   	for(int i = 1, a, b; i &lt;= m; i++)
   	{
   		read(a); read(b); e[++cnt] = (edge){a, b, get(a, b)};
   	}
   	double ans = zhuliu();
   	if(ans == -1) puts(&quot;poor snoopy&quot;);
   	else printf(&quot;%.2f\n&quot;, ans);
   }
   return 0;
}
</code></pre>
<h1 id="二分图">二分图：</h1>
<ul>
<li>待补习</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[动态规划基础]]></title>
        <id>https://gujinli.github.io/post/dong-tai-gui-hua-ji-chu/</id>
        <link href="https://gujinli.github.io/post/dong-tai-gui-hua-ji-chu/">
        </link>
        <updated>2021-11-29T13:11:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="线性dp">线性dp：</h1>
<ul>
<li><strong>LIS：</strong></li>
</ul>
<blockquote>
<p>严格上升：*lower_bound(f+1,f+1+n,a[i]) = a[i];</p>
</blockquote>
<blockquote>
<p>非严格上升：*upper_bound(f+1,f+1+n,a[i]) = a[i];</p>
</blockquote>
<ul>
<li><strong>LCS:</strong> 最长公共子序列</li>
</ul>
<h1 id="背包dp">背包dp:</h1>
<ul>
<li>
<p>01背包：每种物品只能取一件</p>
</li>
<li>
<p>完全背包：每种物品可以取无数件</p>
</li>
<li>
<p>多重背包：每种物品有固定件数。</p>
</li>
</ul>
<blockquote>
<p>可进行二进制拆分优化。</p>
</blockquote>
<ul>
<li>分组背包：对不同组做背包就可以了。</li>
</ul>
<h1 id="区间dp">区间dp:</h1>
<ul>
<li>
<p>枚举区间长度</p>
</li>
<li>
<p>枚举区间起点</p>
</li>
<li>
<p>枚举区间断点</p>
</li>
</ul>
<h1 id="树形dp">树形dp:</h1>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 中的 i 用来表示结点， j 用来表示状态信息。</li>
</ul>
<h1 id="状压dp">状压dp：</h1>
<h1 id="数位dp">数位dp：</h1>
<h1 id="记忆化搜索">记忆化搜索</h1>
<blockquote>
<p>类似dp。先写出dp方程然后在搜索中利用记忆化数组记录最优解。（剪枝？）</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基础数据结构]]></title>
        <id>https://gujinli.github.io/post/ji-chu-shu-ju-jie-gou/</id>
        <link href="https://gujinli.github.io/post/ji-chu-shu-ju-jie-gou/">
        </link>
        <updated>2021-11-29T13:10:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="链表">链表</h1>
<ul>
<li>
<p><strong>单链表</strong></p>
</li>
<li>
<p><strong>双链表</strong></p>
</li>
</ul>
<p>基本没有正式用到的知识。像模拟的数据结构。</p>
<blockquote>
<p>以 0 为 头节点， 1为尾节点。模拟实现即可。</p>
</blockquote>
<ul>
<li><strong>循环链表</strong></li>
</ul>
<h1 id="栈">栈</h1>
<p>先进后出</p>
<ul>
<li>典例：<strong>表达式求值</strong>(acw 3302)</li>
</ul>
<h1 id="队列">队列</h1>
<p>先进先出</p>
<h1 id="单调栈">单调栈</h1>
<blockquote>
<p>维护一个单调的栈。每次弹栈时记录需要的信息</p>
</blockquote>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/problem/P5788">模板</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/P1901">例题</a></p>
</li>
</ul>
<h1 id="单调队列">单调队列</h1>
<blockquote>
<p>维护一个单调的队列，记录信息，队首超出范围（或不符合当前要求）则弹出。</p>
</blockquote>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1886">例题</a></li>
</ul>
<h1 id="kmp">kmp</h1>
<p>字符串匹配。求串s在t中出现的次数。</p>
<blockquote>
<p>记录一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>i</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 表示以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 为节点的串，前缀后缀相等的最大长度。</p>
</blockquote>
<blockquote>
<p>将s和t拼接起来，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>i</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">pi[i] == n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> （n为s串长度）则证明出现了一次，ans++；</p>
</blockquote>
<h1 id="并查集">并查集</h1>
<blockquote>
<p>fa[i] 表示i节点的父节点。</p>
</blockquote>
<blockquote>
<p><strong>压缩路径，按秩合并，带权并查集</strong>等常用思想。代码简单，难在灵活应用</p>
</blockquote>
<h1 id="堆">堆</h1>
<p>待补习，暂时用优先队列代替。</p>
<h1 id="hash表">hash表</h1>
<p>进制哈希。</p>
<ul>
<li>
<p>使用自然溢出是否有必要模质数？</p>
</li>
<li>
<p>是否有必要加一个小质数防止被卡？</p>
</li>
</ul>
<blockquote>
<p>无特殊需求（如前缀和等）时，其实可以加。（但没啥很大意义）</p>
</blockquote>
<h1 id="trie">trie</h1>
<ul>
<li>
<p>字典树用边表示字母</p>
</li>
<li>
<p>有相同前缀的单词公用前缀节点，那我们可以的得出每个节点最多有26个子节点（在单词只包含小写字母的情况下）</p>
</li>
<li>
<p>整棵树的根节点是空的。为什么呢？便于插入和查找，这将会在后面解释。</p>
</li>
<li>
<p>每个单词结束的时候用一个特殊字符表示，图中用的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，那么从根节点到任意一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 所经过的边的所有字母表示一个单词。</p>
</li>
<li>
<p><strong>有关异或：用01串建trie树，边为0或1。</strong></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法基础]]></title>
        <id>https://gujinli.github.io/post/suan-fa-ji-chu/</id>
        <link href="https://gujinli.github.io/post/suan-fa-ji-chu/">
        </link>
        <updated>2021-11-29T13:01:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基础算法整理️">基础算法整理❗️</h1>
<h2 id="排序">排序</h2>
<ul>
<li>
<p><strong>冒泡排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>n次遍历每次从1到n判断相邻的数字是否左小右大否则swap</p>
</li>
<li>
<p><strong>选择排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>n次遍历每次找出最小数添加到一个新数组</p>
</li>
<li>
<p><strong>插入排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>n次遍历每次将当前数添加到一个新数组末尾，并从后向前依次swap直到遇到一个小于等于当前数的数字。</p>
</li>
<li>
<p><strong>希尔排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>n次遍历，每次将第i个数字与前面的数字swap知道遇到一个小于等于当前数的数字。</p>
</li>
<li>
<p><strong>归并排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>每次将数组分成两段，分别处理好两段后合并起来。（递归）</p>
</li>
<li>
<p><strong>快速排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>以中间数为基准数。双指针分别从前从后跑，遇到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于等于中间数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>小于等于中间数则swap。直至$ i&gt;j<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">。</mi><mi mathvariant="normal">则</mi></mrow><annotation encoding="application/x-tex">。则</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">则</span></span></span></span>j<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">左</mi><mi mathvariant="normal">边</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">全</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">小</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">左边的数全部小于中间数，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">左</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span></span></span></span>i$右边的数全部大于中间数。之后递归处理。</p>
</li>
<li>
<p><strong>计数排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>简易桶排序。每个数字放进对应的桶中++。遍历输出。</p>
</li>
<li>
<p><strong>桶排序</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>可以限定桶个数的升级桶排序。</p>
</li>
</ul>
<h2 id="二分">二分</h2>
<ul>
<li>
<p><strong>二分查找</strong></p>
</li>
<li>
<p><strong>二分答案</strong></p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/40579713">日报：二分边界问题</a></p>
</blockquote>
<p>关于二分的问题在这份日报中讲的十分清晰。</p>
<p>分为两种方法，一种为记录中间值，另一种不记录。</p>
<p>不记录的情况则需要根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">l = mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span> 还是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l = mid + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 小心死循环的情况。</p>
<p>总之遇到二分题的时候，认真思考判断边界的处理即可。</p>
<p>（当然直接使用记录中间值的方法也是一种不错的选择）</p>
<p><strong>如果二分答案的值是小数，采取二分多次的方法（如1k或1w）来达到精度要求即可.</strong></p>
</li>
<li>
<p><em><strong>01分数规划：</strong></em></p>
<p>待补习。</p>
</li>
</ul>
<h2 id="高精">高精</h2>
<ul>
<li>sb 大模拟罢了</li>
</ul>
<h2 id="前缀和差分">前缀和差分</h2>
<ul>
<li>
<p><strong>前缀和:</strong></p>
<p>线性 / 二(多)维 / 树上</p>
<blockquote>
<p>还有基于dp的高维前缀和等等</p>
</blockquote>
</li>
<li>
<p><strong>差分:</strong></p>
<p>维护多次对序列的一个区间加上一个数，并在最后询问某一位的数或是多次询问某一位的数。注意修改操作一定要在查询操作之前。</p>
<p>即多次区间加减，离线查询。</p>
<p><em><strong>树上差分 ：</strong></em></p>
<p>分为<strong>点差分</strong>和<strong>边差分</strong>。待补习。</p>
</li>
</ul>
<h2 id="双指针又称尺取法">双指针（又称尺取法）</h2>
<ul>
<li><a href="https://www.luogu.com.cn/blog/Nero-Yuzurizaki/chi-qu-fa-xiao-jie">日报：尺取法小结</a></li>
</ul>
<p>维护两个指针 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">l,r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> ,每次确定区间的左端点,让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 不断向右移动,直到满足条件停下,维护一下答案,直到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">r&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 或者其它情况</p>
<h2 id="位运算">位运算</h2>
<ul>
<li><a href="https://www.luogu.com.cn/blog/chengni5673/er-jin-zhi-yu-wei-yun-suan">日报：二进制与位运算</a></li>
</ul>
<h2 id="离散化">离散化</h2>
<blockquote>
<p>离散化本质上可以看成是一种 哈希，其保证数据在哈希以后仍然保持原来的全/偏序关系。</p>
</blockquote>
<p>通俗地讲就是当有些数据因为本身很大或者类型不支持，自身<strong>无法作为数组的下标</strong>来方便地处理，而影响最终结果的只有元素之间的<strong>相对大小</strong>关系时，我们可以将原来的数据按照从大到小<strong>编号</strong>来处理问题，即离散化。</p>
<p>用来离散化的可以是大整数、浮点数、字符串等等。</p>
<pre><code class="language-cpp">sort(lsh+1,lsh+1+n);

cnt = unique(lsh+1,lsh+1+cnt) - lsh - 1;

ID(x) = lower_bound(lsh+1,lsh+1+cnt,x) - lsh;

</code></pre>
<h2 id="区间合并">区间合并</h2>
<ul>
<li>(acwing 803) 给定n段区间，合并所有有交集的区间。</li>
</ul>
<blockquote>
<p>按左端点排序，贪心从左向右依次合并。</p>
</blockquote>
]]></content>
    </entry>
</feed>